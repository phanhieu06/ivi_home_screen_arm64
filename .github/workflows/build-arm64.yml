name: Build ARM64 Binary

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-arm64:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install cross-compiler, tools, and headers (AMD64)
        run: |
          # 1. Cài đặt các công cụ chéo và headers AMD64 (APT chỉ dùng cho x86_64/AMD64)
          sudo apt-get update -o Acquire::Retries=3 || true 
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            libwayland-dev libegl1-mesa-dev libgles2-mesa-dev \
            wget dpkg-dev binutils

      - name: Manually Install Core ARM64 Runtime Libraries (Dynamic URL Search - Add SUDO FIX)
        run: |
          # Thiết lập thư mục cho thư viện chéo
          CORE_LIB_DIR=/usr/aarch64-linux-gnu/lib
          # Cần quyền root để tạo thư mục hệ thống
          sudo mkdir -p ${CORE_LIB_DIR}
          
          # --- 1. Tải và trích xuất libc6 (glibc) sử dụng tìm kiếm động ---
          echo "Searching for the latest libc6:arm64 version..."
          
          # FIX: Sử dụng chuỗi lệnh grep/cut để trích xuất TÊN FILE CHÍNH XÁC từ thuộc tính href, loại bỏ HTML thừa.
          GLIBC_FILENAME=$(wget -O - http://ports.ubuntu.com/ubuntu-ports/pool/main/g/glibc/ 2>/dev/null | grep 'libc6_.*_arm64.deb' | tail -n 1 | grep -o 'href="[^"]*"' | head -1 | cut -d\" -f2)
          GLIBC_URL="http://ports.ubuntu.com/ubuntu-ports/pool/main/g/glibc/${GLIBC_FILENAME}"
          
          echo "Found libc6:arm64 at URL: ${GLIBC_URL}. Starting download..."
          wget "${GLIBC_URL}" -O libc6.deb
          
          # KIỂM TRA LỖI: Nếu tải xuống thất bại, dừng lại ngay
          if [ ! -f libc6.deb ]; then
             echo "ERROR: Failed to download libc6 ARM64 version. Filename extracted: ${GLIBC_FILENAME}"
             exit 1
          fi
          
          dpkg-deb -x libc6.deb /tmp/glibc_extract
          # THÊM SUDO: Cần quyền root để sao chép vào thư mục hệ thống
          sudo cp /tmp/glibc_extract/usr/lib/aarch64-linux-gnu/libc.so.6 ${CORE_LIB_DIR}/
          sudo cp /tmp/glibc_extract/usr/lib/aarch64-linux-gnu/libm.so.6 ${CORE_LIB_DIR}/
          
          # --- 2. Tải và trích xuất libstdc++6 sử dụng tìm kiếm động ---
          echo "Searching for the latest libstdc++6:arm64 version..."
          
          # FIX: Sử dụng chuỗi lệnh grep/cut để trích xuất TÊN FILE CHÍNH XÁC từ thuộc tính href.
          LIBSTDC_FILENAME=$(wget -O - http://ports.ubuntu.com/ubuntu-ports/pool/main/g/gcc-12/ 2>/dev/null | grep 'libstdc++6_.*_arm64.deb' | tail -n 1 | grep -o 'href="[^"]*"' | head -1 | cut -d\" -f2)
          LIBSTDC_URL="http://ports.ubuntu.com/ubuntu-ports/pool/main/g/gcc-12/${LIBSTDC_FILENAME}"

          echo "Found libstdc++6:arm64 at URL: ${LIBSTDC_URL}. Starting download..."
          wget "${LIBSTDC_URL}" -O libstdc++.deb

          # KIỂM TRA LỖI: Nếu tải xuống thất bại, dừng lại ngay
          if [ ! -f libstdc++.deb ]; then
             echo "ERROR: Failed to download libstdc++6 ARM64 version. Filename extracted: ${LIBSTDC_FILENAME}"
             exit 1
          fi

          dpkg-deb -x libstdc++.deb /tmp/libstdc_extract
          # THÊM SUDO: Cần quyền root để sao chép vào thư mục hệ thống
          sudo cp /tmp/libstdc_extract/usr/lib/aarch64-linux-gnu/libstdc++.so.6 ${CORE_LIB_DIR}/
          
          # --- 3. Tải và trích xuất libfontconfig1 (Font Rendering Dependency)
          echo "Searching for the latest libfontconfig1:arm64 version..."
          
          # Tìm kiếm file .deb
          FONTCONFIG_FILENAME=$(wget -O - http://ports.ubuntu.com/ubuntu-ports/pool/main/f/fontconfig/ 2>/dev/null | grep 'libfontconfig1_.*_arm64.deb' | tail -n 1 | grep -o 'href="[^"]*"' | head -1 | cut -d\" -f2)
          FONTCONFIG_URL="http://ports.ubuntu.com/ubuntu-ports/pool/main/f/fontconfig/${FONTCONFIG_FILENAME}"

          echo "Found libfontconfig1:arm64 at URL: ${FONTCONFIG_URL}. Starting download..."
          wget "${FONTCONFIG_URL}" -O libfontconfig1.deb

          if [ ! -f libfontconfig1.deb ]; then
             echo "ERROR: Failed to download libfontconfig1 ARM64 version. Filename extracted: ${FONTCONFIG_FILENAME}"
             exit 1
          fi

          dpkg-deb -x libfontconfig1.deb /tmp/fontconfig_extract
          # Fontconfig library là libfontconfig.so.1
          sudo cp /tmp/fontconfig_extract/usr/lib/aarch64-linux-gnu/libfontconfig.so.1 ${CORE_LIB_DIR}/
          # TẠO SYMLINK: Tạo libfontconfig.so để linker có thể tìm thấy -lfontconfig
          sudo ln -s libfontconfig.so.1 ${CORE_LIB_DIR}/libfontconfig.so
          
          # --- 4. Tải và trích xuất libfreetype6 (FreeType Font Engine Dependency) 👈 THƯ VIỆN MỚI
          echo "Searching for the latest libfreetype6:arm64 version..."
          
          # Tìm kiếm file .deb
          FREETYPE_FILENAME=$(wget -O - http://ports.ubuntu.com/ubuntu-ports/pool/main/f/freetype/ 2>/dev/null | grep 'libfreetype6_.*_arm64.deb' | tail -n 1 | grep -o 'href="[^"]*"' | head -1 | cut -d\" -f2)
          FREETYPE_URL="http://ports.ubuntu.com/ubuntu-ports/pool/main/f/freetype/${FREETYPE_FILENAME}"

          echo "Found libfreetype6:arm64 at URL: ${FREETYPE_URL}. Starting download..."
          wget "${FREETYPE_URL}" -O libfreetype6.deb

          if [ ! -f libfreetype6.deb ]; then
             echo "ERROR: Failed to download libfreetype6 ARM64 version. Filename extracted: ${FREETYPE_FILENAME}"
             exit 1
          fi

          dpkg-deb -x libfreetype6.deb /tmp/freetype_extract
          # Thư viện thực tế là libfreetype.so.6
          sudo cp /tmp/freetype_extract/usr/lib/aarch64-linux-gnu/libfreetype.so.6 ${CORE_LIB_DIR}/
          # TẠO SYMLINK: Tạo libfreetype.so để linker có thể tìm thấy -lfreetype
          sudo ln -s libfreetype.so.6 ${CORE_LIB_DIR}/libfreetype.so

          # --- 5. Tải và trích xuất libexpat1 (XML Parser Dependency for Fontconfig) 👈 THƯ VIỆN MỚI
          echo "Searching for the latest libexpat1:arm64 version..."
          
          # Tìm kiếm file .deb
          EXPAT_FILENAME=$(wget -O - http://ports.ubuntu.com/ubuntu-ports/pool/main/e/expat/ 2>/dev/null | grep 'libexpat1_.*_arm64.deb' | tail -n 1 | grep -o 'href="[^"]*"' | head -1 | cut -d\" -f2)
          EXPAT_URL="http://ports.ubuntu.com/ubuntu-ports/pool/main/e/expat/${EXPAT_FILENAME}"

          echo "Found libexpat1:arm64 at URL: ${EXPAT_URL}. Starting download..."
          wget "${EXPAT_URL}" -O libexpat1.deb

          if [ ! -f libexpat1.deb ]; then
             echo "ERROR: Failed to download libexpat1 ARM64 version. Filename extracted: ${EXPAT_FILENAME}"
             exit 1
          fi

          dpkg-deb -x libexpat1.deb /tmp/expat_extract
          # Thư viện thực tế là libexpat.so.1
          sudo cp /tmp/expat_extract/usr/lib/aarch64-linux-gnu/libexpat.so.1 ${CORE_LIB_DIR}/
          # TẠO SYMLINK: Tạo libexpat.so để linker có thể tìm thấy -lexpat
          sudo ln -s libexpat.so.1 ${CORE_LIB_DIR}/libexpat.so


          # Đặt biến môi trường cho bước build
          echo "CROSS_LIB_PATH=${CORE_LIB_DIR}" >> $GITHUB_ENV
          
      - name: Create ARM64 Dummy Libraries (for Wayland/EGL/GLESv2)
        id: create_dummy_libs
        run: |
          DUMMY_DIR=./arm64_dummy_libs
          mkdir -p ${DUMMY_DIR}
          
          echo 'Creating dummy libraries: libwayland-client.so, libEGL.so, libGLESv2.so'
          
          create_dummy_lib() {
              local lib_name=$1
              aarch64-linux-gnu-ar qcs ${DUMMY_DIR}/lib${lib_name}.a
              aarch64-linux-gnu-g++ -shared -o ${DUMMY_DIR}/lib${lib_name}.so ${DUMMY_DIR}/lib${lib_name}.a
          }

          create_dummy_lib wayland-client
          create_dummy_lib EGL
          create_dummy_lib GLESv2
          
          echo "DUMMY_DIR=${DUMMY_DIR}" >> $GITHUB_ENV

      - name: Build ARM64 binary
        run: |
          aarch64-linux-gnu-g++ -std=c++17 \
            -I./engine_arm64 \
            -L./engine_arm64 \
            -L${{ env.CROSS_LIB_PATH }} \
            -L${{ env.DUMMY_DIR }} \
            -o ivi_home_screen \
            main.cpp \
            -lflutter_engine \
            -lwayland-client \
            -lEGL \
            -lGLESv2 \
            -lfontconfig \
            -lfreetype \
            -lexpat \
            -lpthread \
            -ldl
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ivi_home_screen_arm64
          path: |
            ivi_home_screen
            engine_arm64/libflutter_engine.so
