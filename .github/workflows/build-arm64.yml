name: Build ARM64 Binary

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-arm64:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install cross-compiler, tools, and Enable ARM64 Architecture
        run: |
          # 1. Cài đặt các công cụ chéo và headers AMD64
          sudo apt-get update -o Acquire::Retries=3 || true 
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            libwayland-dev libegl1-mesa-dev libgles2-mesa-dev \
            dpkg-dev binutils
          
          # 2. BẬT kiến trúc ARM64 và thử cập nhật lại (Bước này thường thất bại, nhưng cần thiết cho download)
          sudo dpkg --add-architecture arm64
          sudo apt-get update -o Acquire::Retries=3 || true 

      - name: Manually Install Core ARM64 Runtime Libraries (Using apt-get download)
        run: |
          # Thiết lập thư mục cho thư viện chéo
          CORE_LIB_DIR=/usr/aarch64-linux-gnu/lib
          mkdir -p ${CORE_LIB_DIR}
          
          # 1. Tải và trích xuất libc6 (glibc) - Tải bằng tên gói thay vì URL tĩnh
          echo "Downloading and installing libc6:arm64..."
          # Lệnh này tải tệp .deb vào thư mục hiện tại
          apt-get download libc6:arm64
          # Tìm tên file đã tải (ví dụ: libc6_2.35-0ubuntu3.7_arm64.deb)
          LIBC_DEB=$(find . -maxdepth 1 -name "libc6_*.deb" -print -quit)
          
          dpkg-deb -x ${LIBC_DEB} /tmp/glibc_extract
          cp /tmp/glibc_extract/lib/aarch64-linux-gnu/libc.so.6 ${CORE_LIB_DIR}/
          cp /tmp/glibc_extract/lib/aarch64-linux-gnu/libm.so.6 ${CORE_LIB_DIR}/
          
          # 2. Tải và trích xuất libstdc++6 - Tải bằng tên gói thay vì URL tĩnh
          echo "Downloading and installing libstdc++6:arm64..."
          apt-get download libstdc++6:arm64
          LIBSTDC_DEB=$(find . -maxdepth 1 -name "libstdc++6_*.deb" -print -quit)
          
          dpkg-deb -x ${LIBSTDC_DEB} /tmp/libstdc_extract
          cp /tmp/libstdc_extract/usr/lib/aarch64-linux-gnu/libstdc++.so.6 ${CORE_LIB_DIR}/
          
          # Đặt biến môi trường cho bước build
          echo "CROSS_LIB_PATH=${CORE_LIB_DIR}" >> $GITHUB_ENV
          
      - name: Create ARM64 Dummy Libraries (for Wayland/EGL/GLESv2)
        id: create_dummy_libs
        run: |
          DUMMY_DIR=./arm64_dummy_libs
          mkdir -p ${DUMMY_DIR}
          
          echo 'Creating dummy libraries: libwayland-client.so, libEGL.so, libGLESv2.so'
          
          create_dummy_lib() {
              local lib_name=$1
              aarch64-linux-gnu-ar qcs ${DUMMY_DIR}/lib${lib_name}.a
              aarch64-linux-gnu-g++ -shared -o ${DUMMY_DIR}/lib${lib_name}.so ${DUMMY_DIR}/lib${lib_name}.a
          }

          create_dummy_lib wayland-client
          create_dummy_lib EGL
          create_dummy_lib GLESv2
          
          echo "DUMMY_DIR=${DUMMY_DIR}" >> $GITHUB_ENV

      - name: Build ARM64 binary
        run: |
          aarch64-linux-gnu-g++ -std=c++17 \
            -I./engine_arm64 \
            -L./engine_arm64 \
            -L${{ env.CROSS_LIB_PATH }} \
            -L${{ env.DUMMY_DIR }} \
            -o ivi_home_screen \
            main.cpp \
            -lflutter_engine \
            -lwayland-client \
            -lEGL \
            -lGLESv2 \
            -lpthread \
            -ldl
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ivi_home_screen_arm64
          path: |
            ivi_home_screen
            engine_arm64/libflutter_engine.so
